/******************************************************************************
 * Filename:       Tank_Meter_Service.h
 *
 * Description:    This file contains the Tank_Meter_Service service definitions and
 *                 prototypes.
 *
 *                 Generated by:
 *                 BDS version: 1.1.3139.0
 *                 Plugin:      Texas Instruments BLE SDK GATT Server plugin 1.0.9
 *                 Time:        Tue Jun 26 2018 14:32:43 GMT+10:00
 *

 * Copyright (c) 2015-2017, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *****************************************************************************/

#ifndef _TANK_METER_SERVICE_H_
#define _TANK_METER_SERVICE_H_

#ifdef __cplusplus
extern "C"
{
#endif

/*********************************************************************
 * INCLUDES
 */
#include <bcomdef.h>

/*********************************************************************
 * CONSTANTS
 */
// Service UUID
#define TANK_METER_SERVICE_SERV_UUID 0x7D29
#define TANK_METER_SERVICE_SERV_UUID_BASE128(uuid) 0x91, 0x08, 0x4F, 0x26, 0x2A, 0x2E, 0x7F, 0xBD, 0x15, 0x42, 0x16, 0x88, LO_UINT16(uuid), HI_UINT16(uuid), 0x0D, 0x9F

// Tank Level Characteristic defines
#define TMS_TANK_LEVEL_ID                 0
#define TMS_TANK_LEVEL_UUID               0xD907
#define TMS_TANK_LEVEL_UUID_BASE128(uuid) 0x91, 0x08, 0x4F, 0x26, 0x2A, 0x2E, 0x7F, 0xBD, 0x15, 0x42, 0x16, 0x88, LO_UINT16(uuid), HI_UINT16(uuid), 0x0D, 0x9F
#define TMS_TANK_LEVEL_LEN                4
#define TMS_TANK_LEVEL_LEN_MIN            4

// Manufacture Date Characteristic defines
#define TMS_MANUFACTURE_DATE_ID                 1
#define TMS_MANUFACTURE_DATE_UUID               0x3489
#define TMS_MANUFACTURE_DATE_UUID_BASE128(uuid) 0x91, 0x08, 0x4F, 0x26, 0x2A, 0x2E, 0x7F, 0xBD, 0x15, 0x42, 0x16, 0x88, LO_UINT16(uuid), HI_UINT16(uuid), 0x0D, 0x9F
#define TMS_MANUFACTURE_DATE_LEN                4
#define TMS_MANUFACTURE_DATE_LEN_MIN            4

// Comms Board Characteristic defines
#define TMS_COMMS_BOARD_ID                 2
#define TMS_COMMS_BOARD_UUID               0x0388
#define TMS_COMMS_BOARD_UUID_BASE128(uuid) 0x91, 0x08, 0x4F, 0x26, 0x2A, 0x2E, 0x7F, 0xBD, 0x15, 0x42, 0x16, 0x88, LO_UINT16(uuid), HI_UINT16(uuid), 0x0D, 0x9F
#define TMS_COMMS_BOARD_LEN                40
#define TMS_COMMS_BOARD_LEN_MIN            2

// Time Characteristic defines
#define TMS_TIME_ID                 3
#define TMS_TIME_UUID               0x1A50
#define TMS_TIME_UUID_BASE128(uuid) 0x91, 0x08, 0x4F, 0x26, 0x2A, 0x2E, 0x7F, 0xBD, 0x15, 0x42, 0x16, 0x88, LO_UINT16(uuid), HI_UINT16(uuid), 0x0D, 0x9F
#define TMS_TIME_LEN                4
#define TMS_TIME_LEN_MIN            4

// LED Characteristic defines
#define TMS_LED_ID                 4
#define TMS_LED_UUID               0x9D66
#define TMS_LED_UUID_BASE128(uuid) 0x91, 0x08, 0x4F, 0x26, 0x2A, 0x2E, 0x7F, 0xBD, 0x15, 0x42, 0x16, 0x88, LO_UINT16(uuid), HI_UINT16(uuid), 0x0D, 0x9F
#define TMS_LED_LEN                1
#define TMS_LED_LEN_MIN            1

// Historic Level Characteristic defines
#define TMS_HISTORIC_LEVEL_ID                 5
#define TMS_HISTORIC_LEVEL_UUID               0x1B03
#define TMS_HISTORIC_LEVEL_UUID_BASE128(uuid) 0x91, 0x08, 0x4F, 0x26, 0x2A, 0x2E, 0x7F, 0xBD, 0x15, 0x42, 0x16, 0x88, LO_UINT16(uuid), HI_UINT16(uuid), 0x0D, 0x9F
#define TMS_HISTORIC_LEVEL_LEN                10
#define TMS_HISTORIC_LEVEL_LEN_MIN            10

// Battery Level Characteristic defines
#define TMS_BATTERY_LEVEL_ID                 6
#define TMS_BATTERY_LEVEL_UUID               0x60C9
#define TMS_BATTERY_LEVEL_UUID_BASE128(uuid) 0x91, 0x08, 0x4F, 0x26, 0x2A, 0x2E, 0x7F, 0xBD, 0x15, 0x42, 0x16, 0x88, LO_UINT16(uuid), HI_UINT16(uuid), 0x0D, 0x9F
#define TMS_BATTERY_LEVEL_LEN                4
#define TMS_BATTERY_LEVEL_LEN_MIN            4

/*********************************************************************
 * TYPEDEFS
 */

// Fields in characteristic "Tank Level"
//   Field "Level" format: sint32, bits: 32

// Fields in characteristic "Manufacture Date"
//   Field "Date" format: uint32, bits: 32

// Fields in characteristic "Comms Board"
//   Field "Installed" format: boolean, bits: 8
//   Field "Serial_Number" format: utf8s, bits: -1
//   Field "Hardware_Version" format: utf8s, bits: -1
//   Field "Firmware_Version" format: utf8s, bits: -1
//   Field "Type" format: uint8, bits: 8
//   Field "PAC" format: utf8s, bits: -1
//   Field "DEVICE_ID" format: utf8s, bits: -1

// Fields in characteristic "Time"
//   Field "Current_Time" format: uint32, bits: 32

// Fields in characteristic "LED"
//   Field "LED_Status" format: boolean, bits: 8

// Fields in characteristic "Historic Level"
//   Field "Level" format: sint32, bits: 32
//   Field "Timestamp" format: uint32, bits: 32
//   Field "Battery_Level" format: uint16, bits: 16

// Fields in characteristic "Battery Level"
//   Field "Level" format: uint32, bits: 32

/*********************************************************************
 * MACROS
 */

/*********************************************************************
 * Profile Callbacks
 */

// Callback when a characteristic value has changed
typedef void (*TankMeterServiceChange_t)( uint16_t connHandle, uint16_t svcUuid, uint8_t paramID, uint8_t *pValue, uint16_t len );

typedef struct
{
  TankMeterServiceChange_t        pfnChangeCb;     // Called when characteristic value changes
  TankMeterServiceChange_t        pfnCfgChangeCb;  // Called when characteristic CCCD changes
} TankMeterServiceCBs_t;



/*********************************************************************
 * API FUNCTIONS
 */


/*
 * TankMeterService_AddService- Initializes the TankMeterService service by registering
 *          GATT attributes with the GATT server.
 *
 *    rspTaskId - The ICall Task Id that should receive responses for Indications.
 */
extern bStatus_t TankMeterService_AddService( uint8_t rspTaskId );

/*
 * TankMeterService_RegisterAppCBs - Registers the application callback function.
 *                    Only call this function once.
 *
 *    appCallbacks - pointer to application callbacks.
 */
extern bStatus_t TankMeterService_RegisterAppCBs( TankMeterServiceCBs_t *appCallbacks );

/*
 * TankMeterService_SetParameter - Set a TankMeterService parameter.
 *
 *    param - Profile parameter ID
 *    len   - length of data to write
 *    value - pointer to data to write.  This is dependent on
 *            the parameter ID and may be cast to the appropriate
 *            data type (example: data type of uint16_t will be cast to
 *            uint16_t pointer).
 */
extern bStatus_t TankMeterService_SetParameter( uint8_t param, uint16_t len, void *value );

/*
 * TankMeterService_GetParameter - Get a TankMeterService parameter.
 *
 *    param - Profile parameter ID
 *    len   - pointer to a variable that contains the maximum length that can be written to *value.
              After the call, this value will contain the actual returned length.
 *    value - pointer to data to write.  This is dependent on
 *            the parameter ID and may be cast to the appropriate
 *            data type (example: data type of uint16_t will be cast to
 *            uint16_t pointer).
 */
extern bStatus_t TankMeterService_GetParameter( uint8_t param, uint16_t *len, void *value );

/*********************************************************************
*********************************************************************/

#ifdef __cplusplus
}
#endif

#endif /* _TANK_METER_SERVICE_H_ */

